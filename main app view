import SwiftUI
import Combine

struct ContentView: View {
    @ObservedObject var taskStore = TaskStore()
    @State private var newToDo: String = ""
    @State private var showDeletedTasks: Bool = false // Add state to toggle view
    
    var searchBar: some View {
        HStack {
            TextField("Enter a new task", text: self.$newToDo)
            Button(action: self.addNewToDo, label: {
                Text("Add New")
            })
        }
    }
    
    func addNewToDo() {
        taskStore.tasks.append(Task(toDoitem: newToDo))
        self.newToDo = ""
    }
    
    func move(from source: IndexSet, to destination: Int) {
        
    }
    
    func delete(at offsets: IndexSet) {
        taskStore.deleteTask(at: offsets)
    }
    
    func restore(task: Task) {
        taskStore.restoreTask(task)
    }
    
    func permanentlyDelete(at offsets: IndexSet) {
        taskStore.permanentlyDeleteTask(at: offsets)
    }
    
    var body: some View {
        NavigationView {
            VStack {
                searchBar.padding()
                
                
                Toggle(isOn: $showDeletedTasks) {
                    Text("Show Deleted Tasks")
                }.padding()
                
                List {
                    ForEach(showDeletedTasks ? taskStore.tasks : taskStore.activeTasks) { task in
                        HStack {
                            Text(task.toDoitem)
                            if showDeletedTasks {
                                Button("Restore") {
                                    restore(task: task)
                                }
                                .buttonStyle(BorderlessButtonStyle())
                                
                                Button("Permanently Delete") {
                                    if let index = taskStore.tasks.firstIndex(where: { $0.id == task.id }) {
                                        permanentlyDelete(at: IndexSet(integer: index))
                                    }
                                }
                                .buttonStyle(BorderlessButtonStyle())
                            }
                        }
                    }
                    .onDelete(perform: delete)
                }
            }
            .navigationBarTitle("Tasks")
            .navigationBarItems(trailing: EditButton())
        }
    }
}
